from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
import os
from typing import Optional, List, Dict, Any, Union
import json
import smtplib
from email.message import EmailMessage


from dotenv import load_dotenv

app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # For development - restrict this in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load environment variables
load_dotenv()

email_password = os.getenv("EMAIL_APP_PASSWORD")  # Add this to your .env file



@app.post("/send-email")
async def send_email(data: Dict[str, Any] = Body(...)):
    try:
        recipient_email = data.get("recipient_email")
        subject = data.get("subject")
        message = data.get("message")
        user_email = data.get("user_email")
        leads = data.get("leads", [])
        query = data.get("query", "")
        attach_csv = data.get("attachCsv", False)
        csv_content = data.get("csvContent", "")
        
        if not recipient_email or not subject:
            raise HTTPException(status_code=400, detail="Recipient email and subject are required")
        
        if not email_password:
            raise HTTPException(status_code=500, detail="Email password not configured")
        
        # Create the email
        email = EmailMessage()
        email["Subject"] = subject
        email["From"] = "qudratullah0708@gmail.com"  # Updated sender email
        email["To"] = recipient_email
        
        # Create HTML content
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
                .header {{ background-color: #f8f9fa; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
                tr:nth-child(even) {{ background-color: #f9f9f9; }}
                .footer {{ margin-top: 20px; font-size: 0.9em; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>LeadGen Report</h2>
                <p>Search query: "{query}"</p>
            </div>
            <div class="content">
                <p>{message}</p>
                
                <h3>Leads ({len(leads)})</h3>
        """
        
        # Add table of leads if we have any
        if leads:
            html_content += """
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Title</th>
                        <th>Company</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Location</th>
                        <th>Source</th>
                    </tr>
            """
            
            for lead in leads:
                html_content += f"""
                    <tr>
                        <td>{lead.get('name', '')}</td>
                        <td>{lead.get('title', '')}</td>
                        <td>{lead.get('company', '')}</td>
                        <td>{lead.get('email', '')}</td>
                        <td>{lead.get('phone', '')}</td>
                        <td>{lead.get('location', '')}</td>
                        <td>{lead.get('source', '')}</td>
                    </tr>
                """
            
            html_content += "</table>"
        else:
            html_content += "<p>No leads to display.</p>"
        
        # Close the HTML
        html_content += """
                <div class="footer">
                    <p>This report was generated by LeadGen Agent. For any questions, please contact support.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Set the email content
        email.set_content(message)
        email.add_alternative(html_content, subtype="html")
        
        # Attach CSV if requested
        if attach_csv and csv_content:
            csv_attachment = csv_content.encode()
            email.add_attachment(
                csv_attachment,
                maintype="text",
                subtype="csv",
                filename=f"leads_{query.replace(' ', '_')}_{len(leads)}_results.csv"
            )
        
        # Send the email
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login("qudratullah0708@gmail.com", email_password)  # Updated login email
            smtp.send_message(email)
        
        return {"message": "Email sent successfully"}
        
    except Exception as e:
        print(f"Error sending email: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error sending email: {str(e)}")

# For development:
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="localhost", port=8000)

